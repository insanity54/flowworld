<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta charset="UTF-8" />
    <link type="text/plain" rel="author" href="/humans.txt">
    <title>multiplayer.yoga</title>

    <!-- HTMX & Extras -->
    <script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6"></script>
    <script src="https://cdn.jsdelivr.net/npm/htmx-ext-sse@2.2.2"></script>
    <script src="https://cdn.jsdelivr.net/npm/easy-speech@2.4.0/dist/EasySpeech.iife.min.js"></script>

    <!-- Alpine Plugins FIRST (inline, not defer!) -->
    <script src="https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.14.9/dist/cdn.min.js"></script>

    <!-- Then Alpine itself (deferred) -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.9/dist/cdn.min.js"></script>

    <!-- Model Viewer -->
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>

    <!-- Alpine Init -->
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.store('app', {
                activeTab: null,
                poseCount: 0,
                incrPoseCount() {
                    this.poseCount += 1
                },
                toggleTab(tabName) {
                    this.activeTab = this.activeTab === tabName ? null : tabName;
                },
            })
            Alpine.store('settings', {
                ttsEnabled: Alpine.$persist(true).using(sessionStorage),
                ttsVolume: Alpine.$persist(0.8).using(sessionStorage),
                ttsCounter: Alpine.$persist(false).using(sessionStorage),
                bgmEnabled: Alpine.$persist(true).using(sessionStorage),
                bgmVolume: Alpine.$persist(0.6).using(sessionStorage),
            });
        });
    </script>

    <style>
        /* Your styles were mostly fine */
        body {
            margin: 0;
            font-family: sans-serif;
            background: #111;
            color: white;
        }

        .logo-spacer {
            height: 12em;
            color: white;
            background-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22256%22%20height%3D%22256%22%20viewBox%3D%220%200%20256%20256%22%3E%3Cpath%20fill%3D%22purple%22%20d%3D%22M242.37%20123.65a11.54%2011.54%200%200%200-7.08-5.46a71.5%2071.5%200%200%200-26.29-1.67c5.48-21.46%202.38-38.36-.75-48a12.16%2012.16%200%200%200-14.16-8.19a82.85%2082.85%200%200%200-31%2014.17a91.06%2091.06%200%200%200-27.9-36a11.91%2011.91%200%200%200-14.44%200a91.06%2091.06%200%200%200-27.9%2036a82.9%2082.9%200%200%200-31-14.17a12.16%2012.16%200%200%200-14.16%208.19c-3.13%209.68-6.23%2026.58-.75%2048a71.5%2071.5%200%200%200-26.26%201.67a11.54%2011.54%200%200%200-7.08%205.46a12%2012%200%200%200-1.2%209.22c3.24%2012%2013.2%2034.81%2043.52%2052.92S113.45%20204%20128%20204s41.61%200%2072.07-18.21s40.28-40.93%2043.52-52.92a12%2012%200%200%200-1.22-9.22M195.8%2068.11a4.2%204.2%200%200%201%204.87%202.89c4%2012.5%208%2038.35-10.77%2071c-10.45%2018.19-25.11%2032.2-38.11%2041.44C162%20170%20172%20149.24%20172%20119.19a113.4%20113.4%200%200%200-5.88-37a75.3%2075.3%200%200%201%2029.68-14.08M55.33%2071a4.19%204.19%200%200%201%204.87-2.84a75.3%2075.3%200%200%201%2029.68%2014.03a113.4%20113.4%200%200%200-5.88%2037c0%2030.05%2010%2050.82%2020.21%2064.23c-13-9.24-27.66-23.25-38.11-41.44C47.32%20109.3%2051.29%2083.45%2055.33%2071m4.72%20108c-27.9-16.67-37-37.32-39.9-48.15a4%204%200%200%201%20.41-3.13a3.6%203.6%200%200%201%202.21-1.73a64.6%2064.6%200%200%201%2026.73-1a123.5%20123.5%200%200%200%209.66%2021c13.28%2023.1%2032.66%2039.67%2048.27%2049.11a116.3%20116.3%200%200%201-47.38-16.17Zm68%2016.34a75.8%2075.8%200%200%201-17.08-16.4C98.37%20162.58%2092%20142.5%2092%20119.19c0-44.25%2023.49-66.75%2033.59-74.36a4%204%200%200%201%204.82%200c10.1%207.61%2033.59%2030.11%2033.59%2074.36c0%2023.31-6.37%2043.39-18.92%2059.68a75.8%2075.8%200%200%201-17.08%2016.4Zm107.85-64.49c-2.92%2010.83-12%2031.48-39.9%2048.15a116.3%20116.3%200%200%201-47.38%2016.15c15.61-9.44%2035-26%2048.27-49.11a123.5%20123.5%200%200%200%209.66-21a64.45%2064.45%200%200%201%2026.73%201a3.6%203.6%200%200%201%202.21%201.73a4%204%200%200%201%20.36%203.01Z%22%20%2F%3E%3C%2Fsvg%3E");
            background-repeat: no-repeat;
            background-size: contain;
            background-position: center;
            margin-bottom: 1em;
        }

        /* Sidebar container fixed on the right, full height */
        .sidebar-container {
            position: fixed;
            top: 0;
            right: 0;
            height: 100vh;
            width: 50px;
            /* narrow width to show just the tabs */
            background: #111;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
            padding: 8px 0;
            z-index: 1000;
            overflow: visible;
        }

        /* Each sidebar panel */
        .sidebar-panel {
            position: fixed;
            top: 0;
            right: 0;
            /* to the left of the tabs container */
            height: 96vh;
            width: 300px;
            background: #222;
            color: white;
            border-radius: 0 0 0 8px;
            box-shadow: -3px 0 8px rgba(0, 0, 0, 0.8);
            padding: 16px;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            display: flex;
            flex-direction: column;
        }

        /* Show panel when active (slide in) */
        .sidebar-panel.active {
            transform: translateX(0);
        }

        /* Tab button container (inside sidebar-container) */
        .sidebar-tab {
            width: 34px;
            height: 34px;
            margin-bottom: 8px;
        }

        /* Tab buttons style */
        .tab-button {
            width: 34px;
            height: 34px;
            font-size: 20px;
            background: #333;
            border: none;
            border-radius: 6px;
            color: white;
            cursor: pointer;
            transition: background-color 0.2s ease;
            position: fixed;
            align-items: center;
            justify-content: center;
            user-select: none;
            transform: translateX(-3em);
        }


        .tab-button:hover {
            background: #555;
        }

        /* Headings in panels */
        .sidebar-panel h2 {
            margin-top: 0;
            margin-bottom: 1rem;
        }

        /* Scrollable chat messages */
        #messages {
            flex-grow: 1;
            overflow-y: auto;
            background: #111;
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #444;
        }


        .sidebar-container .sidebar-panel:nth-child(1) .tab-button {
            top: 20px;
            /* first tab: 20px from top */
        }

        .sidebar-container .sidebar-panel:nth-child(2) .tab-button {
            top: 70px;
            /* second tab: 70px from top (20 + 34 + 16 spacing) */
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 1em;
            max-width: 400px;
        }

        label {
            display: flex;
            flex-direction: column;
            font-size: 1rem;
            gap: 0.5em;
        }

        input.spaced {
            margin-bottom: 2.5em;
        }

        input[type="checkbox"] {
            width: auto;
        }

        input[type="range"] {
            width: 100%;
        }


        model-viewer#human {
            width: 100vw;
            height: 100vh;
            object-fit: contain;
        }

        .title {
            position: absolute;
            bottom: 0;
        }
    </style>
</head>

<body x-data>





    <main hx-ext="sse" sse-connect="/events">

        <!-- Sidebar Container -->
        <div class="sidebar-container">


            <!-- Panel: Chat -->
            <div class="sidebar-panel" :class="{ 'active': $store.app.activeTab === 'chat' }">
                <div class="sidebar-tab">
                    <button class="tab-button" @click="$store.app.toggleTab('chat')">üí¨</button>
                </div>

                <div class="logo-spacer"></div>

                <h2>Chat</h2>
                <div id="messages" sse-swap="message" hx-swap="beforeend">
                    <!-- SSE messages will go here -->
                </div>

                <!-- Chat input form using HTMX -->
                <form id="chat-form" hx-post="/chat" hx-trigger="submit" hx-target="#messages" hx-swap="beforeend">
                    <input type="text" name="content" placeholder="Type a message..." required autocomplete="off" />
                    <button class="btn" type="submit">Send</button>
                </form>
            </div>

            <!-- Panel: Settings -->
            <div class="sidebar-panel" :class="{ 'active': $store.app.activeTab === 'settings' }">
                <div class="sidebar-tab">
                    <button class="tab-button" @click="$store.app.toggleTab('settings')">‚öôÔ∏è</button>
                </div>

                <div class="logo-spacer"></div>
                <h2>Settings</h2>
                <form>
                    <label>
                        TTS Enabled
                        <input class="spaced" type="checkbox" x-model="$store.settings.ttsEnabled">
                    </label>

                    <label>
                        TTS Volume
                        <input class="spaced" type="range" min="0" max="1" step="0.001"
                            x-model="$store.settings.ttsVolume">
                    </label>

                    <label>
                        TTS Pose counter
                        <input class="spaced" type="checkbox" x-model="$store.settings.ttsCounter">
                    </label>

                    <label>
                        BGM Enabled
                        <input class="spaced" type="checkbox" x-model="$store.settings.bgmEnabled">
                    </label>

                    <label>
                        BGM Volume
                        <input class="spaced" type="range" min="0" max="1" step="0.01"
                            x-model="$store.settings.bgmVolume">
                    </label>



                </form>
            </div>


        </div>



        <model-viewer id="human" src="/assets/Man.glb" animation-name="HumanArmature|Man_Punch" alt="human"
            shadow-intensity="1" auto-rotate disable-zoom touch-action="pan-y"
            environment-image="/assets/spruit_sunrise_1k_HDR.hdr" autoplay></model-viewer>
        <h1 class="title" sse-swap="pose"></h1>


    </main>


    <script>
        // function updateAnimation(name) {
        // modelViewer.animationName = name
        // }

        // console.log(modelViewer)

        EasySpeech.init({ maxTimeout: 5000, interval: 250 })
            .then(() => {
                console.debug('EasySpeech load complete')
            })
            .catch(e => console.error(e))

        // SSE helpers
        document.body.addEventListener('htmx:sseMessage', function (e) {


            // console.log('sseMessage has fired with e.detail.data as follows')
            // console.log(e.detail.data) // => <div class="pose" data-pose="{" name":"mountain","displayName":"Mountain
            // Pose","difficulty":1}>Mountain Pose</div>

            const elt = e.detail.elt
            const el = elt.children[0]


            if (!el || !el.dataset.pose) {
                // the el might be a chat message so we dont handle it further
                return
            }

            let pose;
            try {
                console.log(el.dataset.pose)
                pose = JSON.parse(el.dataset.pose);
            } catch (err) {
                throw new Error(`Invalid JSON in data-pose. err=${err}`);
            }

            const vol = Number(Alpine.store('settings').ttsVolume);
            const count = Alpine.store('settings').ttsCounter ? Alpine.store('app').incrPoseCount() : 0
            const text = Alpine.store('settings').ttsCounter ? `${Alpine.store('app').poseCount} ${pose.displayName}` : pose.displayName
            // console.log(`ttsVoluem=${vol}`)
            // Check Alpine settings before speaking
            if (Alpine.store('settings').ttsEnabled) {
                EasySpeech.speak({
                    text,
                    pitch: 1,
                    rate: 0.8,
                    volume: vol,
                    boundary: e => console.debug('boundary reached')
                });
            }

            const poses = ['HumanArmature|Man_Clapping', 'HumanArmature|Man_Death', 'HumanArmature|Man_Idle', 'HumanArmature|Man_Jump', 'HumanArmature|Man_Punch', 'HumanArmature|Man_Run', 'HumanArmature|Man_RunningJump',
                'HumanArmature|Man_Sitting', 'HumanArmature|Man_Standing', 'HumanArmature|Man_SwordSlash', 'HumanArmature|Man_Walk']
            const randomPose = poses[Math.floor(Math.random() * poses.length)];

            // console.log(modelViewer.animationName)
            const modelViewer = document.querySelector('#human')
            modelViewer.animationName = randomPose;
        })



    </script>

</body>

</html>