// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pose {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  upvotes     Int     @default(0)
  difficulty  Int // 1 = Beginner, 2 = Intermediate, 3 = Advanced
  variations  Pose[]  @relation("PoseVariations")
  basePose    Pose?   @relation("PoseVariations", fields: [basePoseId], references: [id])
  basePoseId  String?

  flows FlowPose[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flow {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublic    Boolean  @default(true)
  upvotes     Int      @default(0)
  bookmarkId  String?  @unique // for bookmarkable URLs

  poses    FlowPose[]
  UserFlow UserFlow[]
}

model FlowPose {
  id       String @id @default(cuid())
  flow     Flow   @relation(fields: [flowId], references: [id])
  flowId   String
  pose     Pose   @relation(fields: [poseId], references: [id])
  poseId   String
  order    Int
  duration Int    @default(60) // seconds

  difficultyMap DifficultyMap?
}

model DifficultyMap {
  id               String   @id @default(cuid())
  flowPose         FlowPose @relation(fields: [flowPoseId], references: [id])
  flowPoseId       String   @unique
  beginnerPose     String? // Pose ID
  intermediatePose String? // Pose ID
  advancedPose     String? // Pose ID
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  moderated Boolean  @default(false)
  ipHash    String // for moderation / spam tracking without identity
  flowId    String? // global chat or per-flow
}

model UserFlow {
  id        String   @id @default(cuid())
  flow      Flow     @relation(fields: [flowId], references: [id])
  flowId    String
  createdAt DateTime @default(now())
  ipHash    String // anonymous but consistent per user device/network
}
